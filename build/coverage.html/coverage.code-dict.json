{"/home/travis/build/npmtest/node-npmtest-aa-mysql/test.js":"/* istanbul instrument in package npmtest_aa_mysql */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-aa-mysql/lib.npmtest_aa_mysql.js":"/* istanbul instrument in package npmtest_aa_mysql */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_aa_mysql = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_aa_mysql = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-aa-mysql/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-aa-mysql && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_aa_mysql */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_aa_mysql\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_aa_mysql.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_aa_mysql.rollup.js'] =\n            local.assetsDict['/assets.npmtest_aa_mysql.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_aa_mysql.__dirname + '/lib.npmtest_aa_mysql.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-aa-mysql/node_modules/aa-mysql/lib/index.js":"var Conn = require('./conn');\nvar Pool = require('./pool');\nvar Query = require('./query');\nvar mescapeId = require('mysql').escapeId;\n\n// aa-mysql class\nvar AAMysql = function(conf) {\n\t// config args\n  this.conf = {\n    host: 'localhost',\n    port: 3306,\n    user: 'root',\n    pass: '',\n    prefix: '',\n    db: '',\n    connLimit: 20\n  }\n}\nmodule.exports = new AAMysql();\n\n// config\nAAMysql.prototype.config = function(conf) {\n\tfor (var i in conf) {\n\t\tthis.conf[i] = conf[i];\n\t}\n}\n\n// create a new connection\nAAMysql.prototype.create = function() {\n\treturn new Conn(this.conf);\n}\n\n// create a new connection pool\nAAMysql.prototype.createPool = function() {\n  return new Pool(this.conf);\n}\n\n// create a query\nAAMysql.prototype.createQuery = function(name) {\n  var query = new Query();\n  query.sql.table = mescapeId(this.conf.prefix + name);\n  return query;\n}\n","/home/travis/build/npmtest/node-npmtest-aa-mysql/node_modules/aa-mysql/lib/conn.js":"var util = require('util');\nvar events = require('events');\nvar mysql = require('mysql');\nvar AAQuery = require('./query');\nvar mescape = mysql.escape;\nvar mescapeId = mysql.escapeId;\n\n// connection class\nvar AAConn = module.exports = function(conf) {\n  // default config\n  this.conf = {};\n  for (var i in conf) {\n    this.conf[i] = conf[i];\n  }\n  // origin connection\n  this.conn = {};\n  // id\n  this.id = parseInt(Math.random() * 10e6);\n}\nutil.inherits(AAConn, events.EventEmitter);\n\n/** \n * connect to the mysql server\n */\nAAConn.prototype.connect = function(callback) {\n  var self = this;\n  callback = callback || function() {};\n\n  // create original connection\n  this.conn = mysql.createConnection({\n    host: this.conf.host,\n    port: this.conf.port,\n    user: this.conf.user,\n    password: this.conf.pass,\n  });\n\n  // connect and select database\n  this.conn.connect(function(err) {\n    if (!err) {\n      //self.query('USE ' + mescapeId(self.conf.db), callback);\n      self.query('USE `' + self.conf.db + '`', callback);\n    }\n    else {\n      callback(err);\n    }\n  });\n\n  // bind events\n  this.conn.on('error', function(err) {\n    self.emit('error', err);\n  });\n  this.conn.on('end', function(err) {\n    self.emit('end', err);\n  });\n};\n\n/**\n * select a table and return a query obj to chain\n *\n * @param {String} table name\n */ \nAAConn.prototype.table = function(name) {\n  var query = new AAQuery();\n  query.conn = this;\n  query.sql.table = mescapeId(this.conf.prefix + name);\n  return query;\n}\n\n/**\n * auto transaction procedure\n *\n * @param {Array} query string list\n */\nAAConn.prototype.transaction = function(querys, callback) {\n  var self = this;\n  callback = callback || function() {};\n\n  var tot = 0;\n  var retErr = null;\n  var retRes = [];\n  var cb = function(err, res, id) {\n    tot++;\n    retErr = retErr || err;\n    retRes[id] = res;\n\n    if (tot === querys.length) {\n      if (retErr) {\n        self.rollback();\n        callback(retErr, retRes);\n      } else {\n        self.commit();\n        callback(null, retRes);\n      }\n    }\n  }\n\n  this.begin();\n  for (var i = 0; i < querys.length; i++) {\n    (function(i){\n      self.query(querys[i], function(err, res) {\n        cb(err, res, i);\n      });\n    })(i);\n  }\n}\n\n/**\n * close the connection\n */\nAAConn.prototype.close = function() {\n  if (this.closed) return;\n  this.closed = true;\n  this.conn.destroy();\n};\n\n/**\n * query a sql\n *\n * @param {String} sql string\n */\nAAConn.prototype.query = function(sql, callback) {\n  var self = this;\n  callback = callback || function() {};\n  this.conn.query(sql, function(err, res) {\n    if (err && err.fatal) {\n      self.close();\n    }\n    callback(err, res);\n  });\n}\n\n/**\n * begin transaction\n */\nAAConn.prototype.begin = function(callback) {\n  this.query('BEGIN', callback);\n}\n\n/**\n * commit transaction\n */\nAAConn.prototype.commit = function(callback) {\n  this.query('COMMIT', callback);\n}\n\n/**\n * rollback transaction\n */\nAAConn.prototype.rollback = function(callback) {\n  this.query('ROLLBACK', callback);\n}\n","/home/travis/build/npmtest/node-npmtest-aa-mysql/node_modules/aa-mysql/lib/query.js":"var mysql = require('mysql');\nvar mescape = mysql.escape;\nvar mescapeId = mysql.escapeId;\n\n// query class\nvar AAQuery = module.exports = function() {\n  this.sql = {};\n  this.op = {};\n  this.conn = {};\n}\n\n/**\n * set filed\n * \n * @param {String} field name\n * @param {Boolean} not escape field (default: false)\n * @param {String} as field name (default: '')\n * @param {Boolean} not escape as field (default: false)\n *\n * if there are multiple field, you can use the following method:\n *   (field, [field, notEscapeField, asField, notEscapeAsFiled], ...)\n *\n * example:\n *   field('a') -> SELECT `a` ...\n *   field(['COUNT(`a`)', true, 'count']) -> SELECT COUNT(`a`) AS `count` ...\n *   field('a', ['COUNT(`b`)', true, 'count', true]) -> SELECT `a`, COUNT(`b`) AS count ...\n */\nAAQuery.prototype.field = function() {\n  arg = arguments;\n\n  this.sql.field = '';\n  for (var i = 0; i < arg.length; i++) {\n    if (i !== 0) {\n      this.sql.field += ', ';\n    }\n    if (typeof arg[i] === 'object') {\n      this.sql.field += arg[i][1] ? arg[i][0] : mescapeId(arg[i][0]);\n      if (arg[i].length > 2) {\n        this.sql.field += ' AS ' + (arg[i][3] ? arg[i][2] : mescapeId(arg[i][2]));\n      }\n    }\n    else {\n      this.sql.field += mescapeId(arg[i]);\n    }\n  }\n\n  return this;\n}\n\n/**\n * set where\n * \n * logic group (Array):\n *   @param {Object} logic group or condition group\n *   @param {Object} logic group or condition group\n *   ...\n *   @param {String} logci type (default: AND)\n *\n * condition group (Object):\n *   @param {Key-Value} condition\n *   @param {Key-Value} condition\n *   ...\n *   @param {Key-Value} condition\n *\n * condition {Key-Value}:\n *   @key {String} field name\n *   @value {String} field value\n *   @value {String} judging relation\n *   @value {Boolean} not escape key field \n *   @value {Boolean} not escape value field\n *\n * the arguments of this function is like: (logic group, condition group, logic group, ...., logic type)\n * the arguments list is logic group\n *\n * especially, if the arguments.length = 1, and the type of first argument is String,\n * then the first argument will be the final where condition\n *\n * maybe you can see the usage of this function is very complicated, but when you really use it,\n * you can see it's simple and powerful, hope you can like it... (^-^)\n *\n * example:\n *   where({a: 1}) -> WHERE `a` = 1 ...\n *   where({a: [1, '>']}) -> WHERE `a` > 1 ...\n *   where({a: ['DAYOFWEEK(1)', '=', false, true]}) -> WHERE `a` = DAYOFWEEK(1) ...\n *   where({a: 1, b: 1}) -> WHERE `a` = 1 AND `b` = 1 ...\n *   where({a: 1, b: 1}, {c: 1}) -> WHERE (`a` = 1 AND `b` = 1) AND (`c` = 1) ...\n *   where({a: 1, b: 1}, {c: 1}, 'OR') -> WHERE (`a` = 1 AND `b` = 1) OR (`c` = 1) ...\n *   where([{a: 1}, [{b: 2}, {c: [3, '<']}, 'OR']], {d: 4, e: ['DAYOFWEEK(5)', '=', false, true]}, 'OR') ->\n *     WHERE (`a` = 1 AND (`b` = 2 OR `c` < 3)) OR (`d` = 4 AND `e` = DAYOFWEEK(5)) ...\n *   where('a = 1') -> WHERE a = 1 ...\n */\nAAQuery.prototype.where = function() {\n  var arg = arguments;\n  var join = false;\n\n  if (arg[arg.length - 1] == 'JOIN') {\n    join = true;\n    arg[arg.length - 1] = 'AND';\n  }\n\n  if (arg.length == 1 && typeof arg[0] == 'string') {\n    if (join) {\n      return arg[0];\n    }\n    else {\n      this.sql.where = arg[0];\n    }\n    return this;\n  }\n\n  function parse(arr) {\n    var tot = arr.length;\n    var logic = (typeof arr[tot - 1] == 'string') ? arr[tot - 1] : 'AND';\n    var sql = '';\n\n    for (var i = 0; i < tot; i++) {\n      if (typeof arr[i] == 'string') continue;\n      sql += (i == 0) ? '' : ' ' + logic + ' ';\n\n      if (arr[i].length === undefined) {\n        var tSql = '';\n        var sum = 0;\n        for (var j in arr[i]) {\n          tSql += (sum > 0) ? ' AND ' : '';\n          sum++;\n          if (typeof arr[i][j] == 'object') {\n            tSql += arr[i][j][2] ? j : mescapeId(j);\n            tSql += ' ' + arr[i][j][1] + ' ';\n            tSql += arr[i][j][3] ? arr[i][j][0] : mescape(arr[i][j][0]);\n          }\n          else {\n            tSql += mescapeId(j) + ' = ' + mescape(arr[i][j]);\n          }\n        }\n\n        sql += (sum > 1) ? '(' + tSql + ')' : tSql;\n      }\n      else \n        sql += '(' + parse(arr[i]) + ')';\n    }\n\n    return sql;\n  }\n\n  if (join)\n    return parse(arg);\n  else\n    this.sql.where = parse(arg);\n\n  return this;\n}\n\n/**\n * set order\n * \n * @param {String} field name\n * @param {String} order type (default: ASC)\n * @param {Boolean} not escape field (default: false)\n *\n * if there are multiple order condition, you can use the following method:\n *   ([field name, order type, notEscapeField], [field name, order type, notEscapeField], ...)\n *\n * @example:\n *   order('a') -> ORDER BY `a` ASC ...\n *   order('COUNT(`a`)', 'DESC', true) -> ORDER BY COUNT(`a`) DESC ...\n *   order(['a'], ['COUNT(`b`)', 'DESC', true]) -> ORDER BY `a` ASC, COUNT(`b`) DESC ...\n */\nAAQuery.prototype.order = function() {\n  if (typeof arguments[0] === 'string') {\n    var arg = [];\n    arg.push(arguments);\n  }\n  else {\n    arg = arguments;\n  }\n\n  this.sql.order = '';\n  for (var i = 0; i < arg.length; i++) {\n    if (i != 0) {\n      this.sql.order += ', ';\n    }\n    this.sql.order += arg[i][2] ? arg[i][0] : mescapeId(arg[i][0]);\n    this.sql.order += ' ' + (arg[i][1] || 'ASC');\n  }\n\n  return this;\n}\n\n/* \n * set limit\n *\n * @param {Number} offset (default: 0)\n * @param {Number} rows\n */ \nAAQuery.prototype.limit = function(offset, rows) {\n  if (typeof rows != 'number') {\n    rows = offset;\n    offset = 0;\n  }\n\n  this.sql.limit = '';\n  this.sql.limit += offset ? offset + ', ' : '';\n  this.sql.limit += rows;\n\n  return this;\n}\n\n/* \n * set page limit\n *\n * @param {Number} pagination (default: 1)\n * @param {Number} rows per page (default: 10)\n */ \nAAQuery.prototype.page = function(num, rows) {\n  num = num || 1;\n  rows = rows || 10;\n\n  this.sql.limit = ((num - 1) * rows) + ', ' + rows;\n\n  return this;\n}\n\n/**\n * set join\n *\n *\n * @param {String} join table name\n * @param {Object} join condition (default: null) (usage: see where)\n *\n * if there are multiple join data, you can use the following method:\n *   (name, [name, on], [name, on], ...)\n *\n * @example:\n *   join('a') -> JOIN `a` ...\n *   join('a', {b: 1}) -> JOIN `a` ON `b` = 1 ...\n *   join(['c'], ['a', {b: 1}]) -> JOIN `c` JOIN `a` ON `b` = 1 ...\n */\nAAQuery.prototype.join = function() {\n  if (typeof arguments[0] === 'string') {\n    var arg = [];\n    arg.push(arguments);\n  } else {\n    arg = arguments;\n  }\n\n  if (this.pool) {\n    this.conn = this.pool;\n  }\n\n  for (var i = 0; i < arg.length; i++) {\n    this.sql.table += ' LEFT JOIN ' + mescapeId(this.conn.conf.prefix + arg[i][0]);\n    this.sql.table += arg[i][1] ? ' ON ' + this.where(arg[i][1], 'JOIN') : '';\n  }\n\n  return this;\n}\n\n/**\n * set query option\n *\n * @param {Object} option\n *   explain {Boolean} explain the query process (default: false) \n *   show {Boolean} show the sql (console.log) (default: false) \n *   get {Boolean} get the sql (will return) (default: false) \n */\nAAQuery.prototype.option = function(op) {\n  this.op = op;\n  return this;\n}\n\n/**\n * select\n */\nAAQuery.prototype.select = function(callback) {\n  if (this.op.find) {\n    this.sql.limit = '1';\n  }\n\n  this.sql.final = 'SELECT ';\n  this.sql.final += this.sql.field ? this.sql.field : '*';\n  this.sql.final += ' FROM ';\n  this.sql.final += this.sql.table;\n  this.sql.final += this.sql.where ? ' WHERE ' + this.sql.where : '';\n  this.sql.final += this.sql.order ? ' ORDER BY ' + this.sql.order : '';\n  this.sql.final += this.sql.limit ? ' LIMIT ' + this.sql.limit : '';\n  this.sql.final += ';';\n\n  return this.exec(callback);\n}\n\n/**\n * find (select limit 1)\n */\nAAQuery.prototype.find = function(callback) {\n  this.op.find = 1;\n  return this.select(callback);\n}\n\n/**\n * delete\n */\nAAQuery.prototype.delete = function(callback) {\n  this.sql.final = 'DELETE FROM ';\n  this.sql.final += this.sql.table;\n  this.sql.final += ' WHERE '\n  this.sql.final += this.sql.where;\n  this.sql.final += ';';\n\n  return this.exec(callback);\n}\n\n/**\n * insert\n *\n * @param {Object} data\n *\n * if there are multiple data, you can use the following method:\n *   ([data, data, data, ...])\n *\n * @example:\n *   insert({a: 1, b: 2}) -> INSERT INTO `table`(`a`, `b`) VALUES(1, 2) ...\n *   insert([{a: 1, b: 2}, {a: 3, b: 4}]) -> INSERT INTO `table` (`a`, `b`) VALUES (1, 2), (3, 4) ...\n */\nAAQuery.prototype.insert = function(data, callback) {\n  data = (data instanceof Array) ? data : [data];\n  callback = callback || function() {};\n\n  this.sql.final = 'INSERT INTO ';\n  this.sql.final += this.sql.table;\n\n  this.sql.final += ' (';\n  var  flag = false;\n  for (var i in data[0]) {\n    if (flag) {\n      this.sql.final += ', ';\n    }\n    else {\n      flag = true;\n    }\n    this.sql.final += mescapeId(i);\n  }\n  this.sql.final += ') ';\n\n  this.sql.final += 'VALUES ';\n  for (var i = 0; i < data.length; i++) {\n    if (i !== 0) {\n      this.sql.final += ', ';\n    }\n    var flag = false;\n    this.sql.final += '(';\n    for (var j in data[0]) {\n      if (flag) {\n        this.sql.final += ', ';\n      }\n      else {\n        flag = true;\n      }\n      this.sql.final += mescape(data[i][j]);\n    }\n    this.sql.final += ')';\n  }\n  this.sql.final += ';';\n\n  return this.exec(callback);\n}\n\n/**\n * update\n *\n * @param {Object} data\n *\n * @example:\n *   update({a: 1, b: 2}) -> UPDATE `table` SET `a` = 1, `b` = 2 ...\n */\nAAQuery.prototype.update = function(data, callback) {\n  data = data || {};\n  callback = callback || function() {};\n\n  this.sql.final = 'UPDATE ';\n  this.sql.final += this.sql.table;\n  this.sql.final += ' SET '\n\n  var flag = false;\n  for (var i in data) {\n    if (flag) {\n      this.sql.final += ', ';\n    }\n    else {\n      flag = true;\n    }\n    this.sql.final += mescapeId(i) + ' = ' + ((typeof data[i] === 'object' && data[i][1] === true) ? data[i][0] : mescape(data[i]));\n  }\n\n  this.sql.final += this.sql.where ? ' WHERE ' + this.sql.where : '';\n  this.sql.final += ';';\n\n  return this.exec(callback);\n}\n\n/**\n * execute sql\n */\nAAQuery.prototype.exec = function(callback) {\n  callback = callback || function() {};\n\n  if (this.op.explain) {\n    this.sql.final = 'EXPLAIN ' + this.sql.final;\n  }\n  if (this.op.show) {\n    console.log(this.sql.final);\n    return this.sql.final;\n  }\n  if (this.op.get) {\n    return this.sql.final;\n  }\n\n  if (this.pool) {\n    this.conn = this.pool;\n  }\n\n  var self = this;\n  this.conn.query(this.sql.final, function(err, data) {\n    if (err) {\n      callback(err);\n    }\n    else\n    if (self.op.find && data) {\n      callback(err, data[0]);\n    }\n    else {\n      callback(err, data);\n    }\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-aa-mysql/node_modules/aa-mysql/lib/pool.js":"var mysql = require('mysql');\nvar AAConn = require('./conn');\nvar AAQuery = require('./query');\nvar mescape = mysql.escape;\nvar mescapeId = mysql.escapeId;\n\n// connection pool class\nvar AAPool = module.exports = function(conf) {\n  // default config\n  this.conf = {};\n  for (var i in conf) {\n    this.conf[i] = conf[i];\n  }\n  // total connections\n  this.totConn = 0;\n  // free connections\n  this.freeConn = [];\n  // active connections\n  this.activeConn = [];\n  // waiting list (not that waiter)\n  this.waiter = [];\n}\n\n/**\n * get an available connection\n */\nAAPool.prototype.get = function(callback) {\n  callback = callback || function() {};\n\n  // exist free connection\n  if (this.freeConn.length > 0) {\n    var conn = this.freeConn.shift();\n    conn.class = 'active';\n    this.activeConn.push(conn);\n    callback(null, conn);\n    return;\n  }\n\n  // create new connection\n  if (this.conf.connLimit === 0 || this.totConn < this.conf.connLimit) {\n    this.create(callback);\n    return;\n  }\n\n  // add to waiting list\n  this.waiter.push(callback);\n}\n\n/**\n * release a connection to pool\n *\n * @param {Object} connection\n */\nAAPool.prototype.release = function(conn) {\n  conn = conn || {};\n  if (conn.class !== 'active') return;\n\n  var index = this.activeConn.indexOf(conn);\n  if (index === -1) return;\n\n  conn.class = 'free';\n  this.activeConn.splice(index, 1);\n  this.freeConn.push(conn);\n\n  this.waiterGet();\n}\n\n/**\n * select a table and return a query obj to chain\n *\n * @param {String} table name\n */ \nAAPool.prototype.table = function(name) {\n  var query = new AAQuery();\n  query.pool = this;\n  query.sql.table = mescapeId(this.conf.prefix + name);\n  return query;\n}\n\n/**\n * get a connection and query (Not Recommended)\n * Just for compatible with the old version\n *\n * @param {Object} query data\n */ \nAAPool.prototype.run = function(data, callback) {\n  var self = this;\n  callback = callback || function() {};\n\n  this.get(function(err, conn) {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    var cb = function(err, res) {\n      self.release(conn);\n      callback(err, res);\n    }\n\n    var query = conn.table(data.table);\n    for (var i in data) {\n      var value = data[i];\n\n      if (i == 'join') {\n        for (var j = 0; j < value.length; j++)\n          query = query[i].apply(query, value[j]);\n      }\n      else\n      if (i == 'method') {\n        if (value == 'select' || value == 'find' || value == 'delete')\n          query = query[value].apply(query, [cb]);\n        else\n          query = query[value].apply(query, [data.data, cb]);\n        return query;\n      }\n      else\n      if (typeof query[i] == 'function')\n        query = query[i].apply(query, value);\n    }\n  });\n}\n\n/**\n * query a sql\n *\n * @param {String} sql string\n */\nAAPool.prototype.query = function(sql, callback) {\n  callback = callback || function() {};\n\n  var self = this;\n  this.get(function(err, conn) {\n    self.release(conn);\n    if (err) {\n      callback(err)\n    }\n    else {\n      conn.query(sql, callback);\n    }\n  });\n}\n\n/**\n * create a connection\n */\nAAPool.prototype.create = function(callback) {\n  callback = callback || function() {};\n\n  var conn = new AAConn(this.conf);\n  conn.class = 'active';\n  this.activeConn.push(conn);\n  this.totConn++;\n\n  var self = this;\n  conn.connect(function(err) {\n    if (!err) {\n      callback(null, conn);\n    }\n    else {\n      self.delete(conn);\n      callback('cannot create new connection');\n    }\n  });\n\n  // bind events\n  conn.on('error', function(err) {\n    self.delete(conn);\n  });\n  conn.on('end', function(err) {\n    self.delete(conn);\n  });\n}\n\n/**\n * delete a connection\n *\n * @param {Object} connection\n */\nAAPool.prototype.delete = function(conn) {\n  conn = conn || {};\n  this.totConn--;\n\n  // free conn\n  if (conn.class == 'free') {\n    var index = this.freeConn.indexOf(conn);\n    if (index !== -1) {\n      conn.class = 'delete';\n      conn.close();\n      this.freeConn.splice(index, 1);\n    }\n  }\n  // active conn\n  else {\n    var index = this.activeConn.indexOf(conn);\n    if (index !== -1) {\n      conn.class = 'delete';\n      conn.close();\n      this.activeConn.splice(index, 1);\n    }\n  }\n\n  this.waiterGet();\n}\n\n/**\n * get a connection for waiter\n */\nAAPool.prototype.waiterGet = function() {\n  if (this.waiter.length > 0) {\n    this.get(this.waiter.shift());\n  }\n}\n"}